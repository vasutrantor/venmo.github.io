{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createClientInstance","client","create","authorization","clientErr","clientInstance","console","error","venmo","allowNewBrowserTab","venmoErr","venmoInstance","setState","inErroState","isProcessing","startTokenization","tokenize","then","tokenizeErr","payload","handleVenmoError","handleVenmoSuccess","catch","err","code","log","message","dataCollector","paypal","dataCollectorInstance","deviceData","nonce","details","username","render","state","react_default","a","createElement","venmoButtonRef","bind","assertThisInitialized","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4QA4GeA,qBAtGb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAeRQ,qBAAuB,WACrBC,SAAOC,OAAO,CACZC,cAAe,qCACb,SAACC,EAAWC,GAIVD,EACFE,QAAQC,MAAM,yBAA0BH,GAK1CI,QAAMN,OAAO,CACXD,OAAQI,EACRI,oBAAoB,GAClB,SAACC,EAAUC,GAIb,GAAID,EAGF,OAFAJ,QAAQC,MAAM,wBAAyBG,QACvCjB,EAAKmB,SAAS,CAACC,aAAa,EAAMC,cAAc,IAIlDrB,EAAKsB,kBAAkBJ,QA1CVlB,EAiDnBsB,kBAAoB,SAACJ,GACjBA,EAAcK,WACbC,KAAK,SAACC,EAAaC,GAEdD,EACFzB,EAAK2B,iBAAiBF,GAEtBzB,EAAK4B,mBAAmBF,KAEzBG,MAAM,SAACJ,GACRzB,EAAK2B,iBAAiBF,MA3DTzB,EAgEnB2B,iBAAmB,SAACG,GAClB9B,EAAKmB,SAAS,CAACC,aAAa,EAAMC,cAAc,GAAQ,WACrC,mBAAbS,EAAIC,KACNlB,QAAQmB,IAAI,qDACU,uBAAbF,EAAIC,KACblB,QAAQmB,IAAI,8BAEZnB,QAAQC,MAAM,qBAAsBgB,EAAIG,YAvE3BjC,EA6EnB4B,mBAAqB,SAACF,GAGpBQ,gBAAczB,OAAO,CACnBD,OAAQ,iBACR2B,QAAQ,IACPX,KAAK,SAACY,GACgBA,EAAdC,aAIXxB,QAAQmB,IAAI,8BAA+BN,EAAQY,OAEnDzB,QAAQmB,IAAI,cAAeN,EAAQa,QAAQC,WA1F1BxC,EA6FlByC,OAAS,WAER,OAAQzC,EAAK0C,MAAMrB,aAClBsB,EAAAC,EAAAC,cAAA,qCACK7C,EAAK0C,MAAMtB,YAAcuB,EAAAC,EAAAC,cAAA,sCAAoCF,EAAAC,EAAAC,cAAA,kCA/FnE7C,EAAK8C,eAAiB,KACtB9C,EAAK0C,MAAQ,CACXrB,cAAe,EACfD,aAAa,GAEfpB,EAAK2B,iBAAmB3B,EAAK2B,iBAAiBoB,KAAtB9C,OAAA+C,EAAA,EAAA/C,QAAA+C,EAAA,EAAA/C,CAAAD,KACxBA,EAAK4B,mBAAqB5B,EAAK4B,mBAAmBmB,KAAxB9C,OAAA+C,EAAA,EAAA/C,QAAA+C,EAAA,EAAA/C,CAAAD,KAC1BA,EAAKsB,kBAAoBtB,EAAKsB,kBAAkByB,KAAvB9C,OAAA+C,EAAA,EAAA/C,QAAA+C,EAAA,EAAA/C,CAAAD,KATRA,mFAajBG,KAAKI,8BAdS0C,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASd,OAAOE,EAAAC,EAAAC,cAACW,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC","file":"static/js/main.fe8b0ff0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { client, venmo, dataCollector } from 'braintree-web';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.venmoButtonRef = null;\n    this.state = {\n      isProcessing : true,\n      inErroState: false\n    }\n    this.handleVenmoError = this.handleVenmoError.bind(this);\n    this.handleVenmoSuccess = this.handleVenmoSuccess.bind(this);\n    this.startTokenization = this.startTokenization.bind(this);\n  }\n\n  componentDidMount() {\n    this.createClientInstance();\n  }\n\n  createClientInstance = () => {\n    client.create({\n      authorization: 'sandbox_tb4zs8qs_sn2qnrfxhd898t8h'\n    },  (clientErr, clientInstance) => {\n      // Stop if there was a problem creating the client.\n      // This could happen if there is a network error or if the authorization\n      // is invalid.\n      if (clientErr) {\n        console.error('Error creating client:', clientErr);\n        return;\n      }\n    \n      // Create a Venmo component.\n      venmo.create({\n        client: clientInstance,\n        allowNewBrowserTab: false\n      },  (venmoErr, venmoInstance) => {\n        // Stop if there was a problem creating Venmo.\n        // This could happen if there was a network error or if it's incorrectly\n        // configured.\n        if (venmoErr) {\n          console.error('Error creating Venmo:', venmoErr);\n          this.setState({inErroState: true ,isProcessing: false});\n          return;\n        }\n\n        this.startTokenization(venmoInstance);\n    \n        // ...\n      });\n    });\n  }\n\n  startTokenization = (venmoInstance) => {\n      venmoInstance.tokenize()\n      .then((tokenizeErr, payload) => {\n        \n        if (tokenizeErr) {\n          this.handleVenmoError(tokenizeErr);\n        } else {\n          this.handleVenmoSuccess(payload);\n        }\n      }).catch((tokenizeErr) => {\n        this.handleVenmoError(tokenizeErr)\n      })\n  };\n\n  \n  handleVenmoError = (err) => {\n    this.setState({inErroState: true ,isProcessing: false}, () => {\n      if (err.code === 'VENMO_CANCELED') {\n        console.log('App is not available or user aborted payment flow');\n      } else if (err.code === 'VENMO_APP_CANCELED') {\n        console.log('User canceled payment flow');\n      } else {\n        console.error('An error occurred:', err.message);\n      }\n    });\n\n  }\n\n  handleVenmoSuccess = (payload) => {\n    // Send the payment method nonce to your server, e.g. by injecting\n    // it into your form as a hidden input.\n    dataCollector.create({\n      client: 'clientInstnace',\n      paypal: true,\n    }).then((dataCollectorInstance) => {\n        const {deviceData} = dataCollectorInstance;\n        //send nonce\n        //send device data for txn\n    });\n    console.log('Got a payment method nonce:', payload.nonce);\n    // Display the Venmo username in your checkout UI.\n    console.log('Venmo user:', payload.details.username);\n  }\n\n   render = () => {\n\n    return (this.state.isProcessing ? (\n     <h2>processing your payment</h2>\n      ) : this.state.inErroState ? <h2>error processing payment</h2> : <h2>Payment successfull</h2>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}